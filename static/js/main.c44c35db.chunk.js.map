{"version":3,"sources":["../../clickable-map-app/src/components/Map.js","../../clickable-map-app/src/App.js","../../clickable-map-app/src/index.js"],"names":["calculateClosestCountries","currentCountry","geographies","countryColors","destinationCountry","currentCentroid","geoCentroid","distances","filter","geo","properties","name","undefined","map","distance","geoDistance","sort","a","b","slice","Map","setCountryColors","useState","zoomCenter","setZoomCenter","coordinates","zoom","setDestinationCountry","useEffect","geoJson","feature","worldCountries","objects","countries","randomCountry","features","Math","floor","random","length","destination","console","error","centroid","prevColors","newColors","Object","keys","forEach","countryName","closestCountries","log","country","_jsx","ComposableMap","id","children","_jsxs","ZoomableGroup","center","Geographies","geography","_ref","countryColor","Geography","className","onClick","handleCountryClick","userGuess","prompt","isCorrect","toLowerCase","alert","style","default","fill","outline","hover","pressed","rsmKey","_ref2","projection","x","y","React","Fragment","width","height","rx","ry","pointerEvents","textAnchor","fontFamily","fontSize","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c44c35db.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { ComposableMap, Geographies, Geography, ZoomableGroup } from 'react-simple-maps';\nimport { geoCentroid, geoDistance } from 'd3-geo';\nimport { feature } from 'topojson-client';\nimport worldCountries from '../topojson/world-countries.json'; // Adjust the path as needed\n\nconst calculateClosestCountries = (currentCountry, geographies, countryColors, destinationCountry) => {\n  // Get the centroid of the current country\n  const currentCentroid = geoCentroid(currentCountry);\n\n  // Calculate distances to all other countries, including the destination country\n  const distances = geographies\n    .filter(\n      (geo) =>\n        geo.properties.name !== currentCountry.properties.name && // Exclude the current country\n        (countryColors[geo.properties.name] === '#808080' || // Include grey countries\n         countryColors[geo.properties.name] === undefined || // Include unguessed countries\n         (destinationCountry && geo.properties.name === destinationCountry.properties.name)) // Include the destination country\n    )\n    .map((geo) => ({\n      name: geo.properties.name,\n      distance: geoDistance(currentCentroid, geoCentroid(geo)), // Calculate distance\n    }));\n\n  // Sort by distance (ascending)\n  distances.sort((a, b) => a.distance - b.distance);\n\n  // Return the closest 4 countries\n  return distances.slice(0, 4);\n};\n\nconst Map = () => {\n  const [countryColors, setCountryColors] = useState({}); // Track colors for each country\n  const [zoomCenter, setZoomCenter] = useState({ coordinates: [0, 0], zoom: 1 }); // Center and zoom level\n  const [destinationCountry, setDestinationCountry] = useState(null); // Track the destination country\n\n  const handleCountryClick = (geo, geographies) => {\n    // Allow guessing only for yellow countries\n    if (countryColors[geo.properties.name] !== '#f1c232' && countryColors[geo.properties.name] !== '#f999ac') {\n      return; // Do nothing if the country is not yellow or pink\n    }\n\n    const userGuess = prompt(`What is the name of this country?`);\n    const isCorrect = userGuess && userGuess.toLowerCase() === geo.properties.name.toLowerCase();\n\n    setCountryColors((prevColors) => {\n      const newColors = { ...prevColors };\n\n      // If the guess is correct, reset previously highlighted closest countries\n      if (isCorrect) {\n        Object.keys(newColors).forEach((countryName) => {\n          if (newColors[countryName] === '#f1c232') {\n            newColors[countryName] = '#808080'; // Reset to grey\n          }\n        });\n      }\n\n      // Set the clicked country's color\n      newColors[geo.properties.name] = isCorrect ? '#6aa84f' : '#cc0000'; // Use #6aa84f for correct guesses\n\n      // Check if the guessed country is the destination country\n      if (isCorrect && geo.properties.name === destinationCountry.properties.name) {\n        alert('Congratulations! You reached the destination country and won the game!');\n      }\n\n      // If the guess is correct, calculate the closest 4 countries\n      if (isCorrect) {\n        const closestCountries = calculateClosestCountries(geo, geographies, prevColors, destinationCountry);\n\n        // Log the closest 4 countries to the console\n        console.log('Closest 4 countries:', closestCountries);\n\n        closestCountries.forEach((country) => {\n          if (destinationCountry && country.name === destinationCountry.properties.name) {\n            newColors[country.name] = '#f999ac'; // Make the destination country pink\n          } else {\n            newColors[country.name] = '#f1c232'; // Highlight the closest countries in yellow\n          }\n        });\n      }\n\n      return newColors;\n    });\n  };\n\n  useEffect(() => {\n    // Convert TopoJSON to GeoJSON\n    const geoJson = feature(worldCountries, worldCountries.objects.countries);\n\n    // Randomly select a country from the GeoJSON features\n    const randomCountry = geoJson.features[Math.floor(Math.random() * geoJson.features.length)];\n    const destination = geoJson.features[Math.floor(Math.random() * geoJson.features.length)];\n\n    if (!randomCountry || !destination) {\n      console.error(\"No countries found in the GeoJSON data.\");\n      return;\n    }\n\n    const centroid = geoCentroid(randomCountry); // Get the centroid of the random country\n\n    setCountryColors((prevColors) => {\n      const newColors = { ...prevColors };\n\n      // Reset previously highlighted closest countries\n      Object.keys(newColors).forEach((countryName) => {\n        if (newColors[countryName] === '#f1c232') {\n          newColors[countryName] = '#808080'; // Reset to grey\n        }\n      });\n\n      // Mark the randomly selected country as guessed correctly\n      newColors[randomCountry.properties.name] = '#6aa84f'; // Medium green for correct guess\n\n      // Mark the destination country as purple\n      newColors[destination.properties.name] = '#800080'; // Purple for the destination country\n\n      // Calculate the closest 4 countries\n      const closestCountries = calculateClosestCountries(randomCountry, geoJson.features, prevColors, destination);\n\n      // Log the closest 4 countries to the console\n      console.log('Closest 4 countries for the random country:', closestCountries);\n\n      // Highlight the closest 4 countries in yellow\n      closestCountries.forEach((country) => {\n        newColors[country.name] = '#f1c232';\n      });\n\n      return newColors;\n    });\n\n    // Set the destination country\n    setDestinationCountry(destination);\n\n    // Set the map to zoom in on the randomly selected country\n    setZoomCenter({ coordinates: centroid, zoom: 4 });\n  }, []);\n\n  return (\n    <ComposableMap id=\"map\">\n      <ZoomableGroup center={zoomCenter.coordinates} zoom={zoomCenter.zoom}>\n        {/* Render countries */}\n        <Geographies geography={feature(worldCountries, worldCountries.objects.countries)}>\n          {({ geographies }) =>\n            geographies.map((geo) => {\n              const countryColor = countryColors[geo.properties.name] || '#808080'; // Default to grey\n\n              return (\n                <Geography\n                  key={geo.rsmKey}\n                  geography={geo}\n                  className=\"country\"\n                  onClick={() => handleCountryClick(geo, geographies)}\n                  style={{\n                    default: { fill: countryColor, outline: 'none' },\n                    hover: { fill: countryColor, filter: 'brightness(1.1)', outline: 'none' }, // Slightly brighten the color on hover\n                    pressed: { fill: '#ed6f00', outline: 'none' }, // Optional: pressed state\n                  }}\n                />\n              );\n            })\n          }\n        </Geographies>\n\n        {/* Render country names and white rectangles on top */}\n        <Geographies geography={feature(worldCountries, worldCountries.objects.countries)}>\n          {({ geographies, projection }) =>\n            geographies.map((geo) => {\n              const countryColor = countryColors[geo.properties.name];\n\n              // Skip rendering names for yellow, grey, or the destination country\n              if (\n                countryColor === '#f1c232' || // Yellow\n                countryColor === '#808080' || // Grey\n                (destinationCountry && geo.properties.name === destinationCountry.properties.name) // Destination country\n              ) {\n                return null;\n              }\n\n              if (!countryColor) return null; // Only render guessed countries\n\n              const centroid = geoCentroid(geo); // Calculate the centroid of the country\n              const [x, y] = projection(centroid); // Convert geographic coordinates to screen coordinates\n\n              return (\n                <React.Fragment key={geo.rsmKey}>\n                  {/* Render a white rectangle behind the text */}\n                  <rect\n                    x={x - geo.properties.name.length - 2} // Reduce padding on the left\n                    y={y} // Reduce padding on the top\n                    width={geo.properties.name.length * 2 + 4} // Reduce overall width\n                    height={6} // Reduce height\n                    fill=\"white\"\n                    rx={3} // Slightly smaller rounded corners\n                    ry={3}\n                    style={{\n                      pointerEvents: 'none', // Ensure the rectangle doesn't block clicks\n                    }}\n                  />\n                  {/* Render the country name */}\n                  <text\n                    x={x}\n                    y={y + 4} // Adjust to vertically center the text\n                    textAnchor=\"middle\"\n                    style={{\n                      fontFamily: 'Arial, sans-serif',\n                      fontSize: 10 / zoomCenter.zoom, // Adjust font size inversely to zoom\n                      fill: '#000',\n                      pointerEvents: 'none', // Ensure the text doesn't block clicks\n                    }}\n                  >\n                    {geo.properties.name}\n                  </text>\n                </React.Fragment>\n              );\n            })\n          }\n        </Geographies>\n      </ZoomableGroup>\n    </ComposableMap>\n  );\n};\n\nexport default Map;","import React from 'react';\nimport Map from './components/Map';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Map />\n    </div>\n  );\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}